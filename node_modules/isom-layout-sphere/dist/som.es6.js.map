{"version":3,"file":"som.es6.js","sources":["../src/index.js"],"sourcesContent":["function randomize (nodes, [minX, minY, maxX, maxY]) {\n  const { random } = Math;\n  const dx = maxX - minX;\n  const dy = maxY - minY;\n\n  for (let i = 0, len = nodes.length; i < len; i++) {\n    let node = nodes[i];\n    node.x = minX + random() * dx;\n    node.y = minY + random() * dy;\n  }\n}\n\n\nexport default function som (data, {\n  maxIterations           = 4000,\n  adaption                = 0.8,\n  radius                  = 3,\n  coolingFactor           = 2,\n  iterationsPerRadiusStep = 70,\n  iterationsPerUpdate     = 100,\n  onUpdate                = () => {},\n  onEnd                   = () => {},\n  updateDelay             = 0,\n  map, bounds, dontRandomize\n}) {\n\n  if (!map) {\n    map = data.nodes.reduce((acc, n, i) => {\n      acc[n.id] = i;\n      return acc;\n    }, {});\n  }\n\n  if (!bounds) {\n    const { min, max } = Math;\n    bounds = data.nodes.reduce((acc, node) => {\n      const { x, y } = node;\n\n      acc[0] = min(acc[0], x);\n      acc[1] = min(acc[1], y);\n      acc[2] = max(acc[2], x);\n      acc[3] = max(acc[3], y);\n\n      return acc;\n    }, [Infinity, Infinity, -Infinity, -Infinity]);\n  }\n\n  let t               = 1;\n  let minRadius       = 1;\n  let currAdaption    = adaption;\n  const minAdaption   = 0.15;\n\n  function update (data, map, bounds) {\n    const { nodes, edges } = data;\n    // Generate random position in graph space\n    const tmp = {\n      x: bounds[0] + Math.random() * (bounds[2] - bounds[0]),\n      y: bounds[1] + Math.random() * (bounds[3] - bounds[1])\n    };\n\n    // Get closest vertex to random position\n    let winner;\n    let dist = Infinity;\n    for (let i = 0, len = nodes.length; i < len; i++) {\n      let node = nodes[i];\n      const dx = tmp.x - node.x;\n      const dy = tmp.y - node.y;\n      const localSqDist = dx * dx + dy * dy;\n      if (localSqDist < dist) {\n        dist   = localSqDist;\n        winner = node;\n      }\n    }\n\n    // relax positions\n    let queue = [[winner, 1]];\n    let visited = {};\n\n    while (queue.length) {\n      const [w, dist] = queue.pop();\n\n      const f = currAdaption / Math.pow(2, dist);\n\n      w.x = w.x - f * (w.x - tmp.x);\n      w.y = w.y - f * (w.y - tmp.y);\n\n      // enqueue neighbours\n      if (dist <= radius) {\n        for (let i = 0, len = edges.length; i < len; i++) {\n          const edge = edges[i];\n          let nb     = null;\n          if      (edge.source === w.id) nb = nodes[map[edge.target]];\n          else if (edge.target === w.id) nb = nodes[map[edge.source]];\n          if (nb && !visited[nb.id]) {\n            queue.push([nb, dist + 1]);\n            visited[nb.id] = true;\n          }\n        }\n      }\n    }\n  }\n\n  function step () {\n    t++;\n    update(data, map, bounds);\n    const factor = Math.exp(-1 * coolingFactor * (t / maxIterations));\n    currAdaption = Math.max(minAdaption, factor * adaption);\n    if (currAdaption === minAdaption) { // last step of cool down\n      minRadius = 0;\n    }\n    if (radius > minRadius && t % iterationsPerRadiusStep === 0) radius--;\n  }\n\n  if (!dontRandomize) randomize(data, bounds);\n\n  let timer = setInterval(() => {\n    while (t < maxIterations) {\n      step();\n      if (t % iterationsPerUpdate === 0) {\n        onUpdate();\n        break;\n      }\n    }\n    if (t >= maxIterations) {\n      clearInterval(timer);\n      onUpdate();\n      onEnd();\n    }\n  }, updateDelay);\n}\n\nsom.randomize = randomize;\n"],"names":["const","let","dist","i","len"],"mappings":"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"}